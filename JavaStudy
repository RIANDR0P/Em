CHAPTER 1
1.
2.
3.计算机分为两部分：
  硬件：软件驱动硬件工作
  软件：分为系统软件和应用软件。系统软件直接和硬件交互，应用软件运行在系统软件中
软件开发：使用计算机编程语言完成“应用软件开发”
4.
5.
6.
7.常用DOS命令：
*打开：
  Win+r-->cmd-->回车
*常见命令：
 -exit  退出当前命令窗口
 -cls   清屏
 -内容复制 窗口任意位置右键选择：标记，再选择要复制的内容，再在任意位置右键
 -dir   列出当前目录下所有子文件/子目录
 -cd    
  *cd change directory
  *使用 
    cd 目标路径
  *分为相对路径和绝对路径
    绝对路径：从某磁盘的盘符作为出发点
    相对路径：从当前所在路径作为出发点
  *cd ..回到上级目录
  *cd \ 直接回到根目录
 -切换盘符
    c: 回车
8.文件扩展名
  计算机-->组织-->文件夹和搜索选项-->查看-->隐藏已知文件类型的扩展名
9.计算机语言发展史
  第一代：机器语言
  第二代：低级语言
    以汇编语言为代表
  第三代：高级语言
10.JAVA语言发展
   -诞生于1995年。
   -1996年：JDK1.0诞生
   -JDK
     Javak开发工具包。
   -java包括三大块：
   -JavaSE:标准版
   -JavaEE:企业版
   -JavaME:微型版
11.Java语言特性【开源、免费、纯面向对象、跨平台】
  简单性：不再支持多继承，C++支持多继承
  面向对象：Java屏蔽指针概念
  可移植性
    可以一次编译，到处运行。
    也就是说java程序可在Windows上运行，同样程序可在Linux上运行。
    二者内核不同，执行指令的方式也不一样。
    JVM【Java虚拟机】，Java运行在JVM上，JVM再和底层操作系统打交道。
  多线程
  健壮性
    Java运行中产生的垃圾自动回收。自动垃圾回收机制简称GC机制。（C++程序员开辟内存空间最后要释放）
  安全性
  ...
12.加载与执行
   *运行包括两个阶段
      -编译
      -运行
  *编译阶段：
      检查源程序是否符合Java语法，符合则生成正常的字节码文件(xxx.class)
      字节码问价不是纯粹二进制，无法在操作系统中直接执行
    *编译阶段过程：
    在硬盘某位置新建.java文件，该文件被称为Java源文件。
     *Java程序员采用JDK自带的javac.exe进行Java程序的编译
    *Jacac在DOS窗口中使用
     Javac java源文件路径
    *Javac是一个java编译器工具
    *一个java文件可编译生成多个.class文件
    *.class是最终执行的文件，源文件删除不影响执行
     *编译结束可拷贝class到其他操作系统运行【跨平台】
  *运行阶段：
    java.exe负责运行阶段，在DOS窗口使用
    java 类名（不是文件名！java A.class是错的！）
    java.exe启动Java虚拟机（JVM），JVM会启动类加载器ClassLoader
    ClassLoader会去硬盘上搜索A.class文件。找到文件后将该字节码文件装载到JVM中
    JVM将.class字节码文件解释为二进制，然后操作系统执行二进制和底层硬件平台交互
    
13.第一个Java程序
    JRE Java运行环境，包括JVM。
    JDK 和 JRE是单独两个软件，JDK一般自带JRE,JDK开发，JRE测试/运行
    JDK目录介绍：
      JDK/bin:存放很多命令，如Javac.exe,java.exe
  
  -编译
   *javac命令是否可用?
      打开DOS,直接输入javac,回车。出现如：'javac'不是内部或外部命令，也不是可运行的程序或批处理文件。
      问题原因：Windows无法找到javac
      DOS键入:javac -version javac 版本号
   *Windows如何搜索硬盘上某个命令？
      从当前目录下搜索
      搜索不到的话，从环境变量path指定的路径当中搜索某个命令
      都搜索不到，则报以上错误。
   *path环境变量配置
    将javac所在目录配置到环境变量中。
   
  -运行
   *java HelloWorld 执行原理？
    java.ex启动JVM
    JVM启动后启动类加载器ClassLoader
    ClassLoader搜索HelloWorld.class字节码文件
    找到则执行，找不到则报错
    
   *ClassLoader如何搜索.class文件?
    未配置classpath默认从当前路径下加载.class文件
    或者让ClassLoader去指定路径记载，需要配置环境变量classpath
    classpath环境变量属于java语言中环境变量，不属于Windows操作系统【path环境变量属于操作系统】
    设置环境变量后打开DOS在任意位置都可执行java HelloWorld
    
   classpath=.
    .代表当前目录
    ..代表上级目录
    
14.注释
    注释不会被编译到.class字节码文件中
    编写注释可以使程序的可读性增强。
    
    写法
   1.单行注释
    //注释当行
   2.多行注释
    /*
      ......
    */
   3.javadoc注释
    /**
    * javadoc注释
    * javadoc注释
    * javadoc注释
    */
    可被javadoc.exe解析提取并生成帮助文档（理解为说明书）
    
15.解析
  public 表示公开的
  class表示定义一个类
  HelloWorld表示一个类名
  
  public class HelloWorld {   //定义一个公开的类，起名HelloWorld
  //类体
  //类体中不允许直接编写java语句【除声明变量之外】

    public  static  void  main(String[] args){    
    //表示定义一个公开的静态的"主方法"，程序的执行入口  (String[] args)是一个main方法的形式参数列表
    //方法体
    //方法体
        System.out.println("Hello Word");    //向控制台输出一段消息
    }
}

主方法是程序的执行入口
方法体中可以编写多条java语句

16.public class 和 class区别
  一个java源文件中可定义多个class
  一个java源文件不一定有public
  一个class生成一个xxx.class文件
  一个java源文件当中定义公开的类，public的class只能有一个，并且类名称必须与java源文件名称一致
  每一个class都可以编写main方法，设定程序的入口，想执行B.class中的主方法，执行 java B
  想执行java Hello, Hello.class中必须要有主方法
  
17.第一章重点
*搭建java环境
*独立编写HelloWorld
*掌握path原理和如何配置
*掌握classpath原理和如何配置
*注释
*public class 和 class 的区别



CHAPTER 2
暂时跳过
主要内容
  *标识符
  *关键字
  *字面值
  *变量
  *数据类型
  *二进制
  *字符编码
  *运算符
  *控制语句
  *方法
  *递归

CHAPTER 3 面向对象
 *面向过程和面向对象的区别
  面向过程
    没有独立体的概念，以因果关系为核心，关注实现的具体过程。【集成显卡开发思路】
    -优点：业务逻辑较简单的程序快速开发。
    -缺点：耦合度高，一环出问题，整个系统受影响，导致最终软件"扩展力"差。另外，没有独特体概念，无法达到组件复用。
  面向对象
    关注独立个体【对象】能完成哪些功能。每个独立体都是一个对象。关联弱。低耦合，高扩展力。【独立显卡开发思路】
    -优点：耦合度低，扩展力强。更易解决复杂的业务逻辑。组件复用性强。
    -缺点：前期投入成本较高，需要进行独立体的抽取，大量的系统分析与设计。
    
    c语言：纯面向过程，c++半面向对象，java纯面向对象
    面向对象更符合人的思维方式。
    
 *类和对象的三大特征
   -封装
   -继承
   -多态
   所有面向对象的编程语言都有这三大特征，例JS基于对象
   采用面向对象的方式开发软件，生命周期中：
    *面向对象的分析：OOA
    *面向对象的设计：OOD
    *面向对象的编程：OOP
   
 *类和对象的概念
  *什么是类？
    现实世界不存在，是一个模板，是一个概念，是人类打包思想抽象的结果
    类代表了一类事物
    在现实世界中，对象A和对象B之间有共同特征，进行抽象总结出一个模板，这个模板被称为类。
  *什么是对象？
    实际存在的个体。
  *软件开发过程
    通过Java代码表述一个类
    通过类创建对象
    有对象之后让对象直接协作起来形成一个系统
  *类-->【实例化】-->对象
  *对象又称为实例/instance
  *对象-->【抽象】-->类
  *描述信息
    一个类主要描述的是 状态+动作。
    --状态-->类的属性
    --动作-->类的方法
    
  *类{
    属性；//描述对象的状态信息
    方法；//描述对象的动作信息
  }
  
  *类的定义
    语法结构：
      [修饰符列表] class 类名{
      
      }
      
  *属性通常用一个变量类型定义
  *在类体当中，方法体之外定义的变量称为"成员变量"
  *成员变量没有赋值，系统赋默认值：一切向0看齐。
  
  *java语言中包括两种数据类型：
    -基本数据类型
      byte
      short
      int 
      long 
      float
      double
      boolean
      char
   -引用数据类型
    String.class  SUN提供的
    System.class  SUN提供的
    
    Student.class 程序员自定义的
    ...
   -java语言中所有class都是引用数据类型
   
   例如
   
   /Student.java
   public class Student{
      int no;
      String name;
      int age;
      boolean sex;
   }
   
   /Test.java
   public class Test
   {
     public class Student{
       int no //学号信息
      
       public static void main(string[] args){
      
        Student s =new Student();
        }
     }
   }
   //所有学生都有学号信息
   //每个学生学号信息有所不同
   //访问学号必须先创建对象，通过对象去访问
   //学号信息不能直接通过类去访问，所以这种变量又称为"实例变量"
   //对象被称为实例，"实例变量"又称为"对象变量"【对象级别的变量】
   //不创建对象，no 变量的内存空间不存在
   
   //通过一个类可以实例化多个对象
   //实例化对象的语法： new 类名();
   //new 是java语言中的一个运算符
   //new 运算符的作用是创建对象，在JVM堆内存中开辟新的内存空间
   
   //System.out.printIn(student.no);
   //编译报错，no这个实例变量不能直接"类名"方式访问
   //no是实例变量，对象级别的变量，变量存储在java对象的内部，必须先有对象
   //通过对象才能访问no这个实例变量
   
   ***************************************************************
   方法区内存：在类加载时，class字节码代码片段被加载到该内存空间中
   栈内存(局部变量):方法代码片段执行时候，会给该方法分配内存空间，在栈内存中压栈
   堆内存： new 的对象在堆内存中存储
   
   局部变量在栈内存中存储
   成员变量中的实例变量在堆内存的java对象内部存储
   
   实例变量是一个对象一份，100个对象100份。
   ***************************************************************
   
   s是一个局部变量，对象的地址由s保存，在栈内存中存储，存储指向堆内存中对象的一个地址 【引用】
   *什么是对象？
   new 运算符在堆内存中开辟的内存空间称为对象。
   *什么是引用？
   引用是一个变量，保存了另一个java对象的内存地址
   //引用可以是局部变量也可以是成员变量
   
   //java语言中，程序员不能直接操作堆内存，kava中没有指针不像c语言。
   //程序员只能通过"引用"访问堆内存当中对象内部的实例变量
   
   //访问实例变量的语法格式：
    读取数据： 引用.变量名
    修改数据： 引用.变量名 =值 
   
  
成员变量没有手动赋值的话，系统赋默认值
  //默认值
  
  数据类型          默认值
  ————————————————————————
  byte,short,int,long   0
  float,double          0.0
  boolean               false
  char                  \u0000
  引用数据类型          null 空值   void是返回值类型是空类型
  
  
  
  
   
  
 
 
 
 

   
     
    
  
  
  
